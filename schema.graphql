# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Type {
  id: ID!
  name: String
  assets(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
}

input TypeWhereUniqueInput {
  id: ID
}

input TypeWhereInput {
  AND: [TypeWhereInput!]
  OR: [TypeWhereInput!]
  NOT: [TypeWhereInput!]
  id: IDFilter
  name: StringFilter
  assets: AssetManyRelationFilter
}

input AssetManyRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input TypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TypeUpdateInput {
  name: String
  assets: AssetRelateToManyForUpdateInput
}

input AssetRelateToManyForUpdateInput {
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input TypeUpdateArgs {
  where: TypeWhereUniqueInput!
  data: TypeUpdateInput!
}

input TypeCreateInput {
  name: String
  assets: AssetRelateToManyForCreateInput
}

input AssetRelateToManyForCreateInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

type Classification {
  id: ID!
  name: String
  assets(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
}

input ClassificationWhereUniqueInput {
  id: ID
}

input ClassificationWhereInput {
  AND: [ClassificationWhereInput!]
  OR: [ClassificationWhereInput!]
  NOT: [ClassificationWhereInput!]
  id: IDFilter
  name: StringFilter
  assets: AssetManyRelationFilter
}

input ClassificationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ClassificationUpdateInput {
  name: String
  assets: AssetRelateToManyForUpdateInput
}

input ClassificationUpdateArgs {
  where: ClassificationWhereUniqueInput!
  data: ClassificationUpdateInput!
}

input ClassificationCreateInput {
  name: String
  assets: AssetRelateToManyForCreateInput
}

type Asset {
  id: ID!
  ticket: String
  type: Type
  classification: Classification
  active: Boolean
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  ticket: StringFilter
  type: TypeWhereInput
  classification: ClassificationWhereInput
  active: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AssetOrderByInput {
  id: OrderDirection
  ticket: OrderDirection
  active: OrderDirection
}

input AssetUpdateInput {
  ticket: String
  type: TypeRelateToOneForUpdateInput
  classification: ClassificationRelateToOneForUpdateInput
  active: Boolean
}

input TypeRelateToOneForUpdateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
  disconnect: Boolean
}

input ClassificationRelateToOneForUpdateInput {
  create: ClassificationCreateInput
  connect: ClassificationWhereUniqueInput
  disconnect: Boolean
}

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  ticket: String
  type: TypeRelateToOneForCreateInput
  classification: ClassificationRelateToOneForCreateInput
  active: Boolean
}

input TypeRelateToOneForCreateInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
}

input ClassificationRelateToOneForCreateInput {
  create: ClassificationCreateInput
  connect: ClassificationWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createType(data: TypeCreateInput!): Type
  createTypes(data: [TypeCreateInput!]!): [Type]
  updateType(where: TypeWhereUniqueInput!, data: TypeUpdateInput!): Type
  updateTypes(data: [TypeUpdateArgs!]!): [Type]
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteTypes(where: [TypeWhereUniqueInput!]!): [Type]
  createClassification(data: ClassificationCreateInput!): Classification
  createClassifications(data: [ClassificationCreateInput!]!): [Classification]
  updateClassification(
    where: ClassificationWhereUniqueInput!
    data: ClassificationUpdateInput!
  ): Classification
  updateClassifications(data: [ClassificationUpdateArgs!]!): [Classification]
  deleteClassification(where: ClassificationWhereUniqueInput!): Classification
  deleteClassifications(
    where: [ClassificationWhereUniqueInput!]!
  ): [Classification]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  types(
    where: TypeWhereInput! = {}
    orderBy: [TypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Type!]
  type(where: TypeWhereUniqueInput!): Type
  typesCount(where: TypeWhereInput! = {}): Int
  classifications(
    where: ClassificationWhereInput! = {}
    orderBy: [ClassificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Classification!]
  classification(where: ClassificationWhereUniqueInput!): Classification
  classificationsCount(where: ClassificationWhereInput! = {}): Int
  assets(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  asset(where: AssetWhereUniqueInput!): Asset
  assetsCount(where: AssetWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
